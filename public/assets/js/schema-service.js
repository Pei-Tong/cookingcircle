class SchemaService{constructor(){this.schemaCache={}}async getTableSchema(e){if(this.schemaCache[e])return this.schemaCache[e];try{var{data:r,error:a}=await supabase.from(e).select("*").limit(1);if(a)throw a;var{data:t,error:n}=await supabase.rpc("get_column_info",{target_table:e});const i=n?this.inferSchemaFromData(r):this.processColumnData(t);var s=(await supabase.rpc("get_primary_key",{target_table:e}))["data"];return s&&0<s.length?i.primaryKey=s[0].column_name:i.primaryKey=this.guessPrimaryKey(i.columns,e),this.schemaCache[e]=i}catch(r){return console.error(`Error fetching schema for ${e}:`,r),this.inferSchemaFromSample(e)}}processColumnData(r){const e={};return Array.isArray(r)&&r.forEach(r=>{e[r.column_name]={type:r.data_type,nullable:"YES"===r.is_nullable,default:r.column_default,isPrimaryKey:"PRIMARY KEY"===r.constraint_type}}),{columns:e}}inferSchemaFromData(r){const a={};if(r&&0<r.length){const t=r[0];Object.keys(t).forEach(r=>{var e=t[r];a[r]={type:this.inferDataType(e),nullable:null===e,isPrimaryKey:r.endsWith("_id")||"id"===r}})}return{columns:a}}async inferSchemaFromSample(e){try{var r,{data:a,error:t}=await supabase.from(e).select("*").limit(5);if(t)throw t;return a&&0<a.length?(r=this.inferSchemaFromData(a),this.schemaCache[e]=r):{columns:{}}}catch(r){return console.error(`Error inferring schema for ${e}:`,r),{columns:{}}}}inferDataType(r){if(null===r)return"unknown";var e=typeof r;if("number"==e)return Number.isInteger(r)?"integer":"numeric";if("boolean"==e)return"boolean";if("string"!=e)return"object"==e?Array.isArray(r)?"array":"json":"unknown";if(!isNaN(Date.parse(r)))return"timestamp";if(r.match(/^(https?:\/\/)/))return"url";if(r.startsWith("{")&&r.endsWith("}")||r.startsWith("[")&&r.endsWith("]"))try{return JSON.parse(r),"json"}catch(r){}return"text"}guessPrimaryKey(r,e){for(const a of[e.slice(0,-1)+"_id","id","uuid","key","uid"])if(r[a])return a;for(const t of Object.keys(r))if(t.endsWith("_id"))return t;return Object.keys(r)[0]||"id"}}const schemaService=new SchemaService;