async function fetchRecipes(){try{var{data:e,error:r}=await supabase.from("recipes").select("*").order("created_at",{ascending:!1});if(r)throw r;return e}catch(e){return console.error("Error fetching recipes:",e),[]}}

async function deleteRecipe(e){try{console.log("Starting to delete recipe with ID:",e);var{data:r,error:t}=await supabase.from("recipes").select("*").eq("recipe_id",e).single();if(t)throw t;console.log("Deleting related data...");const{error:o}=await supabase.from("shopping_list").delete().eq("recipe_id",e);o&&console.warn("Warning deleting shopping list items:",o);const{error:a}=await supabase.from("likes").delete().eq("recipe_id",e);a&&console.warn("Warning deleting likes:",a);const{error:i}=await supabase.from("comments").delete().eq("recipe_id",e);i&&console.warn("Warning deleting comments:",i);const{error:s}=await supabase.from("instructions").delete().eq("recipe_id",e);s&&console.warn("Warning deleting instructions:",s);const{error:n}=await supabase.from("ingredients").delete().eq("recipe_id",e);n&&console.warn("Warning deleting ingredients:",n),console.log("Now deleting the main recipe");var{error:c}=await supabase.from("recipes").delete().eq("recipe_id",e);if(c)throw console.error("Failed to delete recipe:",c),c;return console.log("Recipe deleted successfully"),!0}catch(e){return console.error("Error deleting recipe:",e),!1}}

async function incrementRecipeViews(e){try{var{data:r,error:t}=await supabase.from("recipes").select("views_count").eq("recipe_id",e).single();if(t)throw t;var c=r.views_count||0,i=(await supabase.from("recipes").update({views_count:c+1}).eq("recipe_id",e))["error"];if(i)throw i;return!0}catch(e){return console.error("Error updating recipe views:",e),!1}}